(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["buttonsbase"],{

/***/ "./bundles/buttonsbase.js":
/*!********************************!*\
  !*** ./bundles/buttonsbase.js ***!
  \********************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_buttonsbase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/buttonsbase.js */ "./modules/buttonsbase.js");
/* harmony import */ var _modules_buttonsbase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_buttonsbase_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/buttonsbase.js":
/*!********************************!*\
  !*** ./modules/buttonsbase.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sf = window.sf || {};

var buttonsbase = function buttonsbase(exports) {
  'use strict';
  /**
   * Initialize wrapper element for angular.
   * @private
   */

  function wrapperInitialize(createElement, tag, type, element, WRAPPER, role) {
    var input = element;

    if (element.tagName === tag) {
      var ejInstance = sf.base.getValue('ej2_instances', element);
      input = createElement('input', {
        attrs: {
          'type': type
        }
      });
      var props = ['change', 'cssClass', 'label', 'labelPosition', 'id'];

      for (var index = 0, len = element.attributes.length; index < len; index++) {
        if (props.indexOf(element.attributes[index].nodeName) === -1) {
          input.setAttribute(element.attributes[index].nodeName, element.attributes[index].nodeValue);
        }
      }

      sf.base.attributes(element, {
        'class': WRAPPER,
        'role': role,
        'aria-checked': 'false'
      });
      element.appendChild(input);
      sf.base.setValue('ej2_instances', ejInstance, input);
      sf.base.deleteObject(element, 'ej2_instances');
    }

    return input;
  }

  function getTextNode(element) {
    var node;
    var childnode = element.childNodes;

    for (var i = 0; i < childnode.length; i++) {
      node = childnode[i];

      if (node.nodeType === 3) {
        return node;
      }
    }

    return null;
  }
  /**
   * Destroy the button components.
   * @private
   */


  function destroy(ejInst, wrapper, tagName) {
    if (tagName === 'INPUT') {
      wrapper.parentNode.insertBefore(ejInst.element, wrapper);
      sf.base.detach(wrapper);
      ejInst.element.checked = false;
      ['name', 'value', 'disabled'].forEach(function (key) {
        ejInst.element.removeAttribute(key);
      });
    } else {
      ['role', 'aria-checked', 'class'].forEach(function (key) {
        wrapper.removeAttribute(key);
      });
      wrapper.innerHTML = '';
    }
  }

  function preRender(proxy, control, wrapper, element, moduleName) {
    element = wrapperInitialize(proxy.createElement, control, 'checkbox', element, wrapper, moduleName);
    proxy.element = element;

    if (proxy.element.getAttribute('type') !== 'checkbox') {
      proxy.element.setAttribute('type', 'checkbox');
    }

    if (!proxy.element.id) {
      proxy.element.id = sf.base.getUniqueID('e-' + moduleName);
    }
  }
  /**
   * Creates CheckBox component UI with theming and ripple support.
   * @private
   */


  function createCheckBox(createElement, enableRipple, options) {
    if (enableRipple === void 0) {
      enableRipple = false;
    }

    if (options === void 0) {
      options = {};
    }

    var wrapper = createElement('div', {
      className: 'e-checkbox-wrapper e-css'
    });

    if (options.cssClass) {
      sf.base.addClass([wrapper], options.cssClass.split(' '));
    }

    if (options.enableRtl) {
      wrapper.classList.add('e-rtl');
    }

    if (enableRipple) {
      var rippleSpan = createElement('span', {
        className: 'e-ripple-container'
      });
      sf.base.rippleEffect(rippleSpan, {
        isCenterRipple: true,
        duration: 400
      });
      wrapper.appendChild(rippleSpan);
    }

    var frameSpan = createElement('span', {
      className: 'e-frame e-icons'
    });

    if (options.checked) {
      frameSpan.classList.add('e-check');
    }

    wrapper.appendChild(frameSpan);

    if (options.label) {
      var labelSpan = createElement('span', {
        className: 'e-label',
        innerHTML: options.label
      });
      wrapper.appendChild(labelSpan);
    }

    return wrapper;
  }

  function rippleMouseHandler(e, rippleSpan) {
    if (rippleSpan) {
      var event_1 = document.createEvent('MouseEvents');
      event_1.initEvent(e.type, false, true);
      rippleSpan.dispatchEvent(event_1);
    }
  }
  /**
   * Append hidden input to given element
   * @private
   */


  function setHiddenInput(proxy, wrap) {
    if (proxy.element.getAttribute('ejs-for')) {
      wrap.appendChild(proxy.createElement('input', {
        attrs: {
          'name': proxy.name || proxy.element.name,
          'value': 'false',
          'type': 'hidden'
        }
      }));
    }
  }

  exports.wrapperInitialize = wrapperInitialize;
  exports.getTextNode = getTextNode;
  exports.destroy = destroy;
  exports.preRender = preRender;
  exports.createCheckBox = createCheckBox;
  exports.rippleMouseHandler = rippleMouseHandler;
  exports.setHiddenInput = setHiddenInput;
  return exports;
};

sfBlazor.modules["buttonsbase"] = "buttons.wrapperInitialize";
window.sf.buttons = window.sf.base.extend({}, window.sf.buttons, buttonsbase({}));

/***/ })

}]);